---
import Layout from "../layouts/Layout.astro";
import ProductCard from "../components/ProductCard.astro";
import { getCollection } from "astro:content";

// Import product images
import ocudyneImage from "../assets/shop/OcuDyne.png";
import babyMeImage from "../assets/shop/baby-me.webp";
import postnatalImage from "../assets/shop/postnatal.webp";
import boneBuilderImage from "../assets/shop/BoneBuilder.png";
import bloodSugarImage from "../assets/shop/bloodSugar.webp";
import coQImage from "../assets/shop/coQ.png";
import hawthornImage from "../assets/shop/hawthorn.png";
import passionFlowerImage from "../assets/shop/passionFlower.png";
import calmImage from "../assets/shop/calm.png";
import corticoImage from "../assets/shop/cortico.png";
import blendImage from "../assets/shop/blend.webp";

const headline = "Wellness Shop";
const productsRaw = await getCollection("products");

// Map product IDs to their imported images
const imageMap: Record<string, any> = {
  "ocudyne-ii-eye-vitamin.md": ocudyneImage,
  "baby-me-prenatal.md": babyMeImage,
  "baby-me-postnatal.md": postnatalImage,
  "bone-builder-plus.md": boneBuilderImage,
  "promega-blood-sugar.md": bloodSugarImage,
  "promega-coq10.md": coQImage,
  "hawthorn-solid-extract.md": hawthornImage,
  "passionflower-glycerite.md": passionFlowerImage,
  "calm-gummies.md": calmImage,
  "cortico-b5b6.md": corticoImage,
  "celestial-emperors-blend.md": blendImage,
};

// Define product categories
const categories = [
  {
    name: "Pregnancy & Postpartum",
    description: "Essential nutrition for moms and developing babies",
    products: ["baby-me-prenatal.md", "baby-me-postnatal.md"],
  },
  {
    name: "Heart & Blood Sugar Health",
    description: "Support for cardiovascular health and blood sugar regulation",
    products: [
      "promega-coq10.md",
      "hawthorn-solid-extract.md",
      "promega-blood-sugar.md",
    ],
  },
  {
    name: "Stress, Sleep & Nervous System",
    description:
      "Natural support for relaxation, sleep, and nervous system balance",
    products: [
      "calm-gummies.md",
      "passionflower-glycerite.md",
      "celestial-emperors-blend.md",
    ],
  },
  {
    name: "Bone & Joint Health",
    description: "Comprehensive support for bone strength and density",
    products: ["bone-builder-plus.md"],
  },
  {
    name: "Eye Health",
    description: "Advanced nutritional support for optimal vision",
    products: ["ocudyne-ii-eye-vitamin.md"],
  },
  {
    name: "Adrenal & Energy Support",
    description:
      "Essential B vitamins for adrenal health and energy metabolism",
    products: ["cortico-b5b6.md"],
  },
];

// Get products organized by category
const getProductsByCategory = (categoryProductIds: string[]) => {
  return categoryProductIds
    .filter((id) => productsRaw.some((p) => p && p.id === id))
    .map((id) => productsRaw.find((p) => p && p.id === id)!)
    .filter(Boolean);
};
---

<Layout title="Wellness Shop | Wellness Medical Center">
  <section class="max-w-6xl mx-auto px-4 mt-24 xl:px-0">
    <div class="md:flex md:items-center md:gap-8">
      <div class="md:w-3/5">
        <h2 class="text-4xl text-[var(--color-primary)] font-medium mb-4 mt-8">
          {headline}
        </h2>
        <p class="text-2xl mb-8">
          Discover our curated selection of wellness products.
        </p>
      </div>
    </div>

    <!-- Search Bar -->
    <div class="mb-8">
      <div class="relative max-w-md">
        <input
          type="text"
          id="shop-search"
          placeholder="Search products, brands, or categories..."
          class="w-full px-4 py-3 pl-10 pr-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[var(--color-primary)] focus:border-transparent outline-none transition-all duration-200"
        />
        <div
          class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none"
        >
          <svg
            class="h-5 w-5 text-gray-400"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
        </div>
      </div>
    </div>

    <div class="flex flex-col gap-16 w-full">
      {
        categories.map((category) => {
          const categoryProducts = getProductsByCategory(category.products);
          if (categoryProducts.length === 0) return null;

          return (
            <div class="category-section">
              <div class="mb-8">
                <h3 class="text-2xl font-semibold text-[var(--color-primary)] mb-2">
                  {category.name}
                </h3>
                <p class="text-gray-600 text-lg">{category.description}</p>
              </div>

              <div class="flex flex-col gap-8">
                {categoryProducts.map((product) => {
                  if (!product) return null;
                  const image = imageMap[product.id];
                  return (
                    <ProductCard
                      title={product.data.title}
                      brand={product.data.brand}
                      quantity={product.data.quantity}
                      price={product.data.price || 0}
                      salePrice={
                        product.data.salePrice || product.data.price || 0
                      }
                      image={image || ocudyneImage}
                      shopUrl={product.data.shopUrl}
                      description={product.data.description}
                    />
                  );
                })}
              </div>
            </div>
          );
        })
      }
    </div>
  </section>

  <script>
    document.addEventListener("DOMContentLoaded", function () {
      const searchInput = document.getElementById(
        "shop-search"
      ) as HTMLInputElement;
      const categorySections = document.querySelectorAll(".category-section");

      if (!searchInput) return;

      searchInput.addEventListener("input", function (e) {
        const target = e.target as HTMLInputElement;
        const searchTerm = target.value.toLowerCase().trim();

        categorySections.forEach((section) => {
          const products = section.querySelectorAll(".product-card");
          let hasVisibleProducts = false;

          products.forEach((product) => {
            const title =
              product.querySelector("h3")?.textContent?.toLowerCase() || "";
            const brand =
              product
                .querySelector(".font-medium")
                ?.textContent?.toLowerCase() || "";
            const description =
              product.querySelector("p")?.textContent?.toLowerCase() || "";
            const categoryName =
              section.querySelector("h3")?.textContent?.toLowerCase() || "";

            const isMatch =
              title.includes(searchTerm) ||
              brand.includes(searchTerm) ||
              description.includes(searchTerm) ||
              categoryName.includes(searchTerm);

            if (isMatch || searchTerm === "") {
              (product as HTMLElement).style.display = "block";
              hasVisibleProducts = true;
            } else {
              (product as HTMLElement).style.display = "none";
            }
          });

          // Show/hide category section based on whether it has visible products
          if (hasVisibleProducts || searchTerm === "") {
            (section as HTMLElement).style.display = "block";
          } else {
            (section as HTMLElement).style.display = "none";
          }
        });
      });

      // Clear search functionality
      searchInput.addEventListener("keydown", function (e) {
        if (e.key === "Escape") {
          searchInput.value = "";
          searchInput.dispatchEvent(new Event("input"));
        }
      });
    });
  </script>
</Layout>
